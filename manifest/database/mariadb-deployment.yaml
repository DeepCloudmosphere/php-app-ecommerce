apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mariadb-st
  namespace: db
  labels:
    tier: back-end
spec:
  serviceName: "db-h" # give name in helm with release name
  replicas: 3
  selector:
    matchLabels:
      tier: back-end
      web: db
  template:
    metadata:
      name: mariadb-pod
      labels:
        tier: back-end
        web: db
    spec:
      # your node must have this label otherwise pod  going to pending state
      # nodeSelector:
      #   node: kubenode02

      ######## node affinity work like node selector but in complex scenerio ##########

      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            # - weight: 1
            #   preference:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: node
                    operator: In
                    values:
                      - kubenode02

      # # if node have color=blue:NoSchedule tainted this pod can schedule on it because it has toleration  , or may be schedule on other node if here no nodeselector or nodeaffinity  is set.
      tolerations:
        - key: "color"
          operator: "Equal"
          value: "blue"
          effect: "NoSchedule"
          # tolerationSeconds: 10
      volumes:
        # - name: mysql-data
        #   persistentVolumeClaim:
        #     claimName: db-pv-claim

        - name: mysql-product-data
          configMap:
            name: db-load-script

      containers:
        - name: mariadb-ctr
          image: mariadb:10.8.6
          ports:
            - containerPort: 3306

          readinessProbe:
            tcpSocket:
              port: 3306
            initialDelaySeconds: 20
            periodSeconds: 10
            failureThreshold: 6 # bydefault 3

          livenessProbe:
            tcpSocket:
              port: 3306
            initialDelaySeconds: 15
            periodSeconds: 20
            failureThreshold: 6 #bydefault 3

          #environment variable from cofigmap

          envFrom:
            - configMapRef:
                name: db-configmap
            - secretRef:
                name: db-secret

          # env:
          # - name: MYSQL_ROOT_PASSWORD
          #   valueFrom:
          #     secretKeyRef:
          #       name: php-db-secret
          #       key: MYSQL_ROOT_PASSWORD

          # - name: MYSQL_USER
          #   valueFrom:
          #     configMapKeyRef:
          #       name: php-db-configmap
          #       key: USER

          # - name: MYSQL_PASSWORD
          #   valueFrom:
          #     secretKeyRef:
          #       name: php-db-secret
          #       key: DB_PASSWORD

          # - name: MYSQL_DATABASE
          #   valueFrom:
          #     secretKeyRef:
          #       name: php-db-secret
          #       key: DB_DATABASE

          # volume mount into mysql ctr
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: ebs-claim #mysql-data
            - mountPath: /docker-entrypoint-initdb.d #this dir executed when ctr will start
              name: mysql-product-data
  volumeClaimTemplates:
    - metadata:
        name: ebs-claim
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: ebs-sc
        resources:
          requests:
            storage: 4Gi
  # volumeClaimTemplates:
  #   - metadata:
  #       name: ebs-claim
  #       namespace: db
  #     spec:
  #       accessModes:
  #         - ReadWriteMany
  #       resources:
  #         requests:
  #           storage: 8Gi
#         # storageClassName: local-storage
# # if you not use storage class so, you have to created pv manually on local and configure that,
# # if you will not created pv for pvc then k8s automatically dynamically created pv for these pvc but its not persistent data it will delete when pvc is deleted.
# # for testing purpose i left as it is

