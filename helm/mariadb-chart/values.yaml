###  mariadb deployment #####
replicaCount: 1
namespace: db

labels:
  tier: back-end
  web: db
  dp: back-end
  ns: db-ns

image:
  repository: mariadb
  tag: 10.8.6

containers:
  name: mariadb-ctr

port: 3306

##### radinessprobe and liveness probe ######

readinessProbe:
  port: 3306
  initialDelaySeconds: 20
  periodSeconds: 10
  failureThreshold: 6 # bydefault 3

livenessProbe:
  port: 3306
  initialDelaySeconds: 15
  periodSeconds: 20
  failureThreshold: 6 #bydefault 3

#### node affinity #####
affinity:
  key: node
  operator: In
  values:
    - kubenode02
    - minikube

#### tolerations #####
tolerations:
  key: "color"
  operator: "Equal"
  value: "blue"
  effect: "NoSchedule"
  # tolerationSeconds: 10

############# volumes ##########

volumes:
  vol1: mysql-data
  vol2: mysql-product-data

volumeMounts:
  dbData: /var/lib/mysql
  dockerEntrypoint: /docker-entrypoint-initdb.d

####### PersistentVolumeClaim ############
pvclaim:
  name: ebs-sc-claim
  storage: 5Gi
  accessModes: ReadWriteOnce #ReadWriteMany

####### storage class
storageClass:
  create: true
  name: ebs-sc
  provisioner: ebs.csi.aws.com
  type: gp2
  volumeBindingMode: WaitForFirstConsumer

pv:
  name: db-pv-volume
  storage: 10Gi
  accessModes: ReadWriteMany
  hostpath: /home/vagrant/db-pv-volume-data

####### config map ######

configmap:
  db:
    name: db-configmap
    user: deepak

  script: db-load-script

########## secret #########

secret:
  name: db-secret
  data:
    mysqlrootpass: bXlzcWw=
    mysqlpass: ZGVlcGFrMTIz
    mysqldb: ZWNvbWRi

######## service ############

service:
  name: db
  type: ClusterIP
  port: 3306
  targetport: 3306

####### headless service #######
headlessService:
  name: db-h
  port: 3306
  targetport: 3306
  clusterIP: None

## cpu and memory limits

cpu:
  name: cpu-limit-range
  limits:
    default:
      cpu: "300m"
    defaultRequest:
      cpu: "250m"
    type: Container

memory:
  name: mem-limit-range
  limits:
    default:
      memory: "500Mi"
    defaultRequest:
      memory: "256Mi"
    type: Container

### network policy

networkPolicy:
  name: db-network-policy
  # labels for pod where to apply network policy
  podSelectorLabels:
    web: db
    tier: back-end
  policyTypes:
    - Ingress
    - Egress

  ingress:
    namespaceLabels:
      ns: web-ns
    # labels for pod to allow by network policy
    podSelectorLabels:
      web: nginx-php
      tier: front-end
    port: 3306
